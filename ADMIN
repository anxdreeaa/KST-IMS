using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.OleDb;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace LoginPanel
{
    public partial class Admin : Form
    {
        private OleDbConnection conn;
        private int userId;

        public Admin(int userId)
        {
            InitializeComponent();
            this.userId = userId;
            conn = new OleDbConnection("Provider=Microsoft.ACE.OLEDB.12.0;Data Source=KST IMS DATABASE.accdb");
        }

        private void btnDashboard_Click(object sender, EventArgs e)
        {
            pnlContent.Controls.Clear();
            Dashboard1 d = new Dashboard1("AdminUser");
            d.TopLevel = false;
            pnlContent.Controls.Add(d);
            d.BringToFront();
            d.Show();
        }

        private void btnInventory_Click(object sender, EventArgs e)
        {
            pnlContent.Controls.Clear();
            Inventory i = new Inventory();
            i.TopLevel = false;
            pnlContent.Controls.Add(i);
            i.BringToFront();
            i.Show();
        }

        private void pnlContent_Paint(object sender, PaintEventArgs e)
        {
            if (pnlContent.Controls.Count == 0)
            {
                Dashboard1 d = new Dashboard1("AdminUser");
                d.TopLevel = false;
                pnlContent.Controls.Add(d);
                d.BringToFront();
                d.Show();
            }
        }

        private void btnArchive_Click(object sender, EventArgs e)
        {
            Archive a = new Archive("AdminUser");
            a.TopLevel = false;
            pnlContent.Controls.Add(a);
            a.BringToFront();
            a.Show();
        }

        private void ExecuteDatabaseOperation(Action<OleDbConnection> dbAction)
        {
            try
            {
                conn.Open();
                dbAction(conn);
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error: {ex.Message}", "Database Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (conn.State == ConnectionState.Open)
                {
                    conn.Close();
                }
            }
        }

        private void btnLogout_Click(object sender, EventArgs e)
        {
            DialogResult result = MessageBox.Show("Are you sure you want to log out?", "Log Out Confirmation", MessageBoxButtons.YesNo);

            if (result == DialogResult.Yes)
            {
                string formattedTimeout = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");

                ExecuteDatabaseOperation((connection) =>
                {
                    string updateLogQuery = "UPDATE LogTable SET Timeout = @timeout WHERE ID = @userId AND Timeout IS NULL";
                    OleDbCommand updateCmd = new OleDbCommand(updateLogQuery, connection);
                    updateCmd.Parameters.AddWithValue("@timeout", formattedTimeout);
                    updateCmd.Parameters.AddWithValue("@userId", userId);
                    updateCmd.ExecuteNonQuery();
                });

                MessageBox.Show("Logout Successful.");
                Application.Exit();
            }
            else
            {
                MessageBox.Show("Logout canceled.");
            }
        }

        private void btnProducts_Click(object sender, EventArgs e)
        {
            Products p = new Products();
            p.TopLevel = false;
            pnlContent.Controls.Add(p);
            p.BringToFront();
            p.Show();
        }
    }
}
